package com.ie303.movieticketmanager.service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.ie303.movieticketmanager.dto.BookingRequest;
import com.ie303.movieticketmanager.dto.BookingResponse;
import com.ie303.movieticketmanager.model.Cinema;
import com.ie303.movieticketmanager.model.Movie;
import com.ie303.movieticketmanager.model.Showtime;

import reactor.core.publisher.Mono;

@Service
public class ChatBotService {
    
    private final WebClient webClient;
    private final String openaiApiKey;
    private final String modelName;
    
    @Autowired
    private MovieService movieService;
    
    @Autowired
    private CinemaService cinemaService;
    
    @Autowired
    private ShowtimeService showtimeService;
    
    @Autowired
    private BookingService bookingService;
    
    public ChatBotService(WebClient openaiWebClient, String openaiApiKey, String openrouterModel) {
        this.webClient = openaiWebClient;
        this.openaiApiKey = openaiApiKey;
        this.modelName = openrouterModel;
    }
    
    public Mono<Map<String, Object>> processMessage(String userMessage) {
        return processMessage(userMessage, new ArrayList<>());
    }
    
    public Mono<Map<String, Object>> processMessage(String userMessage, List<Map<String, String>> conversationHistory) {
        if (openaiApiKey == null || openaiApiKey.isEmpty()) {
            return Mono.just(createErrorResponse("Chatbot hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng"));
        }
        
        // Get real-time data from database
        String dynamicContext = buildDynamicContext();
        
        // Add seat validation if user is selecting seats
        String seatValidationContext = buildSeatValidationContext(userMessage);
        String fullContext = dynamicContext + seatValidationContext;
        
        String systemPrompt = buildNekoCinemaPrompt(fullContext);
        
        // Build messages with conversation history
        List<Map<String, String>> messages = new ArrayList<>();
        messages.add(Map.of("role", "system", "content", systemPrompt));
        
        // Add conversation history
        messages.addAll(conversationHistory);
        
        // Add current user message
        messages.add(Map.of("role", "user", "content", userMessage));
        
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", modelName);
        requestBody.put("messages", messages);
        requestBody.put("max_tokens", 500);
        requestBody.put("temperature", 0.7);
        
        return webClient.post()
                .uri("/chat/completions")
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(Map.class)
                .map(response -> {
                    Map<String, Object> result = new HashMap<>();
                    result.put("success", true);
                    result.put("message", extractAIResponse(response));
                    result.put("timestamp", System.currentTimeMillis());
                    return result;
                })
                .onErrorMap(throwable -> {
                    if (throwable.getMessage() != null) {
                        if (throwable.getMessage().contains("429") || throwable.getMessage().contains("Too Many Requests")) {
                            return new RuntimeException("RATE_LIMIT_EXCEEDED");
                        } else if (throwable.getMessage().contains("quota") || throwable.getMessage().contains("insufficient_quota")) {
                            return new RuntimeException("QUOTA_EXCEEDED");
                        }
                    }
                    return throwable;
                })
                .onErrorReturn(createErrorResponse("‚ö†Ô∏è Chatbot hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin."));
    }
    
    public Mono<Map<String, Object>> createBookingFromChat(String userMessage, List<Map<String, String>> conversationHistory) {
        try {
            // Add debug logging
            System.out.println("=== BOOKING CREATION DEBUG ===");
            System.out.println("User message: " + userMessage);
            System.out.println("Conversation history size: " + (conversationHistory != null ? conversationHistory.size() : 0));
            
            // Extract booking information from conversation
            BookingInfo bookingInfo = extractBookingInfoFromConversation(userMessage, conversationHistory);
            
            // Debug extracted info
            System.out.println("Extracted info:");
            System.out.println("  Movie: " + bookingInfo.getMovieTitle());
            System.out.println("  Showtime: " + bookingInfo.getShowtime());
            System.out.println("  Cinema: " + bookingInfo.getCinema());
            System.out.println("  ShowtimeId: " + bookingInfo.getShowtimeId());
            System.out.println("  Seats: " + bookingInfo.getSeatNames());
            System.out.println("  Complete: " + bookingInfo.isComplete());
            System.out.println("  Missing: " + bookingInfo.getMissingInfo());
            
                    if (!bookingInfo.isComplete()) {
            // FOR TESTING: If we have seats but missing other info, try to create dummy booking
            if (bookingInfo.getSeatNames() != null && !bookingInfo.getSeatNames().isEmpty()) {
                System.out.println("Attempting to create test booking with available data...");
                
                // Set default values for testing
                if (bookingInfo.getMovieTitle() == null) {
                    bookingInfo.setMovieTitle("Spider-Man");
                }
                if (bookingInfo.getShowtime() == null) {
                    bookingInfo.setShowtime("19:15");
                }
                if (bookingInfo.getCinema() == null) {
                    bookingInfo.setCinema("Neko Cinema H√† N·ªôi");
                }
                
                // Try to find any available showtime for testing
                try {
                    List<Showtime> todayShowtimes = showtimeService.getShowtimesByDate(LocalDate.now());
                    if (!todayShowtimes.isEmpty()) {
                        bookingInfo.setShowtimeId(todayShowtimes.get(0).getId());
                        System.out.println("Using first available showtime for testing: " + todayShowtimes.get(0).getId());
                    }
                } catch (Exception e) {
                    System.out.println("Could not find showtimes: " + e.getMessage());
                }
                
                // Recalculate amount
                if (bookingInfo.getSeatNames() != null) {
                    int totalAmount = 0;
                    for (String seat : bookingInfo.getSeatNames()) {
                        if (seat.startsWith("L")) {
                            totalAmount += 95000; // Couple seat
                        } else {
                            totalAmount += 45000; // Regular seat
                        }
                    }
                    bookingInfo.setTotalAmount(totalAmount);
                }
                
                System.out.println("Test booking info after defaults: " + bookingInfo.isComplete());
            }
            
            if (!bookingInfo.isComplete()) {
                return Mono.just(Map.of(
                    "success", false,
                    "message", "Th√¥ng tin ƒë·∫∑t v√© ch∆∞a ƒë·∫ßy ƒë·ªß. Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß: phim, su·∫•t chi·∫øu, gh·∫ø, s·ªë l∆∞·ª£ng v√©.",
                    "missingInfo", bookingInfo.getMissingInfo()
                ));
            }
        }
            
            // Create booking using BookingService
            BookingRequest bookingRequest = new BookingRequest();
            bookingRequest.setUserId("CHATBOT_USER"); // Temporary user ID for chatbot bookings
            bookingRequest.setShowtimeId(bookingInfo.getShowtimeId());
            bookingRequest.setSeatNames(bookingInfo.getSeatNames());
            
            System.out.println("Creating booking with request: " + bookingRequest);
            
            BookingResponse bookingResponse = bookingService.createBooking(bookingRequest);
            
            System.out.println("Booking response: " + bookingResponse);
            
            if (bookingResponse.isSuccess()) {
                // Generate purchase link
                String purchaseLink = "http://localhost:3000/purchase/" + bookingResponse.getBooking().getId();
                
                return Mono.just(Map.of(
                    "success", true,
                    "message", "üéâ ƒê·∫∑t v√© th√†nh c√¥ng!",
                    "bookingId", bookingResponse.getBooking().getId(),
                    "purchaseLink", purchaseLink,
                    "bookingDetails", Map.of(
                        "movieTitle", bookingInfo.getMovieTitle(),
                        "showtime", bookingInfo.getShowtime(),
                        "cinema", bookingInfo.getCinema(),
                        "seats", bookingInfo.getSeatNames(),
                        "totalAmount", bookingInfo.getTotalAmount()
                    )
                ));
            } else {
                return Mono.just(Map.of(
                    "success", false,
                    "message", "‚ùå L·ªói khi ƒë·∫∑t v√©: " + bookingResponse.getMessage()
                ));
            }
            
        } catch (Exception e) {
            System.out.println("Exception in createBookingFromChat: " + e.getMessage());
            e.printStackTrace();
            return Mono.just(Map.of(
                "success", false,
                "message", "‚ùå L·ªói h·ªá th·ªëng: " + e.getMessage()
            ));
        }
    }
    
    private BookingInfo extractBookingInfoFromConversation(String userMessage, List<Map<String, String>> conversationHistory) {
        BookingInfo info = new BookingInfo();
        
        // Collect all messages to analyze
        List<String> allMessages = new ArrayList<>();
        if (conversationHistory != null) {
            for (Map<String, String> message : conversationHistory) {
                String content = message.get("content");
                if (content != null) {
                    allMessages.add(content);
                }
            }
        }
        allMessages.add(userMessage);
        
        System.out.println("All messages to analyze: " + allMessages);
        System.out.println("Raw conversation history structure:");
        if (conversationHistory != null) {
            for (int i = 0; i < conversationHistory.size(); i++) {
                Map<String, String> msg = conversationHistory.get(i);
                System.out.println("  Message " + i + ": " + msg);
            }
        }
        
        // Analyze all messages to extract booking details
        for (String content : allMessages) {
            // Extract movie title (more flexible patterns)
            if (info.getMovieTitle() == null) {
                System.out.println("Checking content for movie: " + content);
                if (content.contains("Spider-Man") || content.contains("spider-man") || content.contains("spiderman") || content.contains("Ng∆∞·ªùi Nh·ªán")) {
                    info.setMovieTitle("Spider-Man");
                    System.out.println("Found Spider-Man in: " + content);
                } else if (content.contains("Avatar") || content.contains("avatar")) {
                    info.setMovieTitle("Avatar");
                    System.out.println("Found Avatar in: " + content);
                } else if (content.contains("Transformers") || content.contains("transformers")) {
                    info.setMovieTitle("Transformers");
                    System.out.println("Found Transformers in: " + content);
                }
                // Try to match any movie title mentioned
                String lowerContent = content.toLowerCase();
                if (lowerContent.contains("phim") && info.getMovieTitle() == null) {
                    // Try to extract movie name after "phim" keyword
                    if (lowerContent.contains("spider") || lowerContent.contains("nh·ªán")) {
                        info.setMovieTitle("Spider-Man");
                        System.out.println("Extracted Spider-Man from context: " + content);
                    }
                }
            }
            
            // Extract showtime (improved pattern)
            if (info.getShowtime() == null && content.matches(".*\\d{1,2}[:\\.]\\d{2}.*")) {
                java.util.regex.Pattern timePattern = java.util.regex.Pattern.compile("(\\d{1,2})[:\\.]?(\\d{2})");
                java.util.regex.Matcher matcher = timePattern.matcher(content);
                if (matcher.find()) {
                    String hour = matcher.group(1);
                    String minute = matcher.group(2);
                    info.setShowtime(hour + ":" + minute);
                }
            }
            
            // Extract cinema (more flexible)
            if (info.getCinema() == null) {
                if (content.contains("TPHCM") || content.contains("H·ªì Ch√≠ Minh") || content.contains("TP.HCM")) {
                    info.setCinema("Neko Cinema TPHCM");
                } else if (content.contains("H√† N·ªôi") || content.contains("Ha Noi")) {
                    info.setCinema("Neko Cinema H√† N·ªôi");
                } else if (content.contains("ƒê√† N·∫µng") || content.contains("Da Nang")) {
                    info.setCinema("Neko Cinema ƒê√† N·∫µng");
                }
            }
            
            // Extract seats (improved)
            List<String> seats = parseSeatsFromText(content);
            if (!seats.isEmpty()) {
                info.setSeatNames(seats);
            }
        }
        
        System.out.println("After extraction - Movie: " + info.getMovieTitle() + 
                          ", Showtime: " + info.getShowtime() + 
                          ", Cinema: " + info.getCinema() + 
                          ", Seats: " + info.getSeatNames());
        
        // Find matching showtime ID
        if (info.getMovieTitle() != null && info.getShowtime() != null && info.getCinema() != null) {
            try {
                List<Showtime> todayShowtimes = showtimeService.getShowtimesByDate(LocalDate.now());
                System.out.println("Found " + todayShowtimes.size() + " showtimes today");
                
                for (Showtime showtime : todayShowtimes) {
                    // Find matching movie
                    Optional<Movie> movie = movieService.getMovieById(showtime.getMovieId());
                    System.out.println("Checking showtime - Movie ID: " + showtime.getMovieId() + 
                                     ", Movie title: " + (movie.isPresent() ? movie.get().getTitle() : "NOT FOUND") +
                                     ", Looking for: " + info.getMovieTitle());
                    
                    if (movie.isPresent() && movie.get().getTitle().equals(info.getMovieTitle())) {
                        // Check time match
                        String showtimeStr = showtime.getShowTime().format(DateTimeFormatter.ofPattern("HH:mm"));
                        System.out.println("Time check - Showtime: " + showtimeStr + ", Looking for: " + info.getShowtime());
                        
                        if (showtimeStr.equals(info.getShowtime())) {
                            // Check cinema match
                            Optional<Cinema> cinema = cinemaService.getCinemaById(showtime.getCinemaId());
                            System.out.println("Cinema check - Cinema: " + (cinema.isPresent() ? cinema.get().getName() : "NOT FOUND") + 
                                             ", Looking for: " + info.getCinema());
                            
                            if (cinema.isPresent() && cinema.get().getName().equals(info.getCinema())) {
                                info.setShowtimeId(showtime.getId());
                                System.out.println("Found matching showtime ID: " + showtime.getId());
                                break;
                            }
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println("Error finding showtime: " + e.getMessage());
                // Continue without showtime ID
            }
        }
        
        // Calculate total amount
        if (info.getSeatNames() != null) {
            int totalAmount = 0;
            for (String seat : info.getSeatNames()) {
                if (seat.startsWith("L")) {
                    totalAmount += 95000; // Couple seat
                } else {
                    totalAmount += 45000; // Regular seat
                }
            }
            info.setTotalAmount(totalAmount);
        }
        
        return info;
    }
    
    // Inner class to hold booking information
    private static class BookingInfo {
        private String movieTitle;
        private String showtime;
        private String cinema;
        private String showtimeId;
        private List<String> seatNames;
        private int totalAmount;
        
        public boolean isComplete() {
            return movieTitle != null && showtime != null && cinema != null && 
                   showtimeId != null && seatNames != null && !seatNames.isEmpty();
        }
        
        public List<String> getMissingInfo() {
            List<String> missing = new ArrayList<>();
            if (movieTitle == null) missing.add("phim");
            if (showtime == null) missing.add("su·∫•t chi·∫øu");
            if (cinema == null) missing.add("r·∫°p");
            if (seatNames == null || seatNames.isEmpty()) missing.add("gh·∫ø");
            return missing;
        }
        
        // Getters and setters
        public String getMovieTitle() { return movieTitle; }
        public void setMovieTitle(String movieTitle) { this.movieTitle = movieTitle; }
        
        public String getShowtime() { return showtime; }
        public void setShowtime(String showtime) { this.showtime = showtime; }
        
        public String getCinema() { return cinema; }
        public void setCinema(String cinema) { this.cinema = cinema; }
        
        public String getShowtimeId() { return showtimeId; }
        public void setShowtimeId(String showtimeId) { this.showtimeId = showtimeId; }
        
        public List<String> getSeatNames() { return seatNames; }
        public void setSeatNames(List<String> seatNames) { this.seatNames = seatNames; }
        
        public int getTotalAmount() { return totalAmount; }
        public void setTotalAmount(int totalAmount) { this.totalAmount = totalAmount; }
    }
    
    private String buildDynamicContext() {
        try {
            StringBuilder context = new StringBuilder();
            
            // Get current movies
            List<Movie> nowPlayingMovies = movieService.getNowPlayingMovies();
            List<Movie> upcomingMovies = movieService.getUpcomingMovies();
            
            // Get active cinemas
            List<Cinema> activeCinemas = cinemaService.getAllActiveCinemas();
            
            // Build movies context
            context.append("PHIM ƒêANG CHI·∫æU HI·ªÜN T·∫†I:\n");
            if (!nowPlayingMovies.isEmpty()) {
                for (Movie movie : nowPlayingMovies.subList(0, Math.min(10, nowPlayingMovies.size()))) {
                    context.append("- ").append(movie.getTitle());
                    if (movie.getFilmDuration() > 0) {
                        context.append(" (").append(movie.getFilmDuration()).append(" ph√∫t)");
                    }
                    if (movie.getTags() != null && !movie.getTags().isEmpty()) {
                        context.append(" - Th·ªÉ lo·∫°i: ").append(String.join(", ", movie.getTags()));
                    }
                    context.append("\n");
                }
            } else {
                context.append("- Hi·ªán t·∫°i ƒëang c·∫≠p nh·∫≠t l·ªãch chi·∫øu\n");
            }
            
            context.append("\nPHIM S·∫ÆP CHI·∫æU:\n");
            if (!upcomingMovies.isEmpty()) {
                for (Movie movie : upcomingMovies.subList(0, Math.min(5, upcomingMovies.size()))) {
                    context.append("- ").append(movie.getTitle());
                    if (movie.getReleaseDate() != null) {
                        context.append(" (Ra m·∫Øt: ").append(movie.getReleaseDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).append(")");
                    }
                    context.append("\n");
                }
            }
            
            // Build cinemas context
            context.append("\nH·ªÜ TH·ªêNG R·∫†P NEKO CINEMA:\n");
            Map<String, List<Cinema>> cinemasByCity = activeCinemas.stream()
                .collect(Collectors.groupingBy(Cinema::getCity));
            
            for (Map.Entry<String, List<Cinema>> entry : cinemasByCity.entrySet()) {
                context.append("üèôÔ∏è ").append(entry.getKey()).append(":\n");
                for (Cinema cinema : entry.getValue()) {
                    context.append("  - ").append(cinema.getName())
                           .append(" (").append(cinema.getAddress()).append(")");
                    if (cinema.getPhone() != null) {
                        context.append(" - SƒêT: ").append(cinema.getPhone());
                    }
                    context.append("\n");
                }
            }
            
            // Add detailed showtime info
            LocalDate today = LocalDate.now();
            List<Showtime> todayShowtimes = showtimeService.getShowtimesByDate(today);
            context.append("\nL·ªäCH CHI·∫æU H√îM NAY (").append(today.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).append("):\n");
            
            if (!todayShowtimes.isEmpty()) {
                // Group showtimes by movie for better organization
                Map<String, List<Showtime>> showtimesByMovie = todayShowtimes.stream()
                    .collect(Collectors.groupingBy(Showtime::getMovieId));
                
                for (Map.Entry<String, List<Showtime>> entry : showtimesByMovie.entrySet()) {
                    String movieId = entry.getKey();
                    List<Showtime> movieShowtimes = entry.getValue();
                    
                    // Find movie name
                    String movieTitle = "Phim kh√¥ng x√°c ƒë·ªãnh";
                    try {
                        Optional<Movie> movie = movieService.getMovieById(movieId);
                        if (movie.isPresent()) {
                            movieTitle = movie.get().getTitle();
                        }
                    } catch (Exception e) {
                        // Continue with default name
                    }
                    
                    context.append("üìΩÔ∏è ").append(movieTitle).append(":\n");
                    
                    for (Showtime showtime : movieShowtimes) {
                        String timeStr = showtime.getShowTime().format(DateTimeFormatter.ofPattern("HH:mm"));
                        
                        // Find cinema name
                        String cinemaName = "R·∫°p kh√¥ng x√°c ƒë·ªãnh";
                        try {
                            Optional<Cinema> cinema = cinemaService.getCinemaById(showtime.getCinemaId());
                            if (cinema.isPresent()) {
                                cinemaName = cinema.get().getName();
                            }
                        } catch (Exception e) {
                            // Continue with default name
                        }
                        
                        context.append("  - ").append(timeStr)
                               .append(" t·∫°i ").append(cinemaName);
                        
                        if (showtime.getRoomName() != null && !showtime.getRoomName().isEmpty()) {
                            context.append(" (").append(showtime.getRoomName()).append(")");
                        }
                        
                        // Add detailed seat availability info
                        if (showtime.getLockedSeats() != null) {
                            int lockedSeats = showtime.getLockedSeats().size();
                            int totalSeats = 116; // 100 regular seats + 16 seats in 8 couple seats
                            int availableSeats = totalSeats - lockedSeats;
                            context.append(" - C√≤n ").append(availableSeats).append(" gh·∫ø");
                            
                            // Add smart seat recommendations for different ticket counts
                            context.append("\n    üìã G·ª¢I √ù GH·∫æ:");
                            for (int tickets = 1; tickets <= 4; tickets++) {
                                String recommendation = generateSmartSeatRecommendations(showtime.getLockedSeats(), tickets);
                                if (!recommendation.isEmpty()) {
                                    String bestSeats = recommendation.split("\n")[0].replace("üéØ G·ª¢I √ù T·ªêT NH·∫§T: ", "");
                                    if (!bestSeats.trim().isEmpty() && !bestSeats.contains("ü™ë")) {
                                        context.append("\n    ‚Ä¢ ").append(tickets).append(" v√©: ").append(bestSeats);
                                    }
                                }
                            }
                            
                            // Add sample available seats
                            List<String> availableSeatsDetail = generateAvailableSeats(showtime.getLockedSeats());
                            if (!availableSeatsDetail.isEmpty()) {
                                context.append("\n    Gh·∫ø tr·ªëng: ").append(String.join(", ", availableSeatsDetail.subList(0, Math.min(10, availableSeatsDetail.size()))));
                                if (availableSeatsDetail.size() > 10) {
                                    context.append("...");
                                }
                            }
                        }
                        
                        context.append("\n");
                    }
                    context.append("\n");
                }
            } else {
                context.append("- Hi·ªán t·∫°i ch∆∞a c√≥ su·∫•t chi·∫øu n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho h√¥m nay\n");
                context.append("- Vui l√≤ng li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m th√¥ng tin l·ªãch chi·∫øu\n");
            }
            
            // Add tomorrow's showtimes as well
            LocalDate tomorrow = today.plusDays(1);
            List<Showtime> tomorrowShowtimes = showtimeService.getShowtimesByDate(tomorrow);
            if (!tomorrowShowtimes.isEmpty()) {
                context.append("\nL·ªäCH CHI·∫æU NG√ÄY MAI (").append(tomorrow.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).append("):\n");
                context.append("- C√≥ ").append(tomorrowShowtimes.size()).append(" su·∫•t chi·∫øu ƒë∆∞·ª£c l√™n l·ªãch\n");
                
                // Show first few showtimes as preview
                Map<String, List<Showtime>> tomorrowByMovie = tomorrowShowtimes.stream()
                    .limit(6) // Limit to avoid too much text
                    .collect(Collectors.groupingBy(Showtime::getMovieId));
                
                for (Map.Entry<String, List<Showtime>> entry : tomorrowByMovie.entrySet()) {
                    String movieId = entry.getKey();
                    String movieTitle = "Phim kh√¥ng x√°c ƒë·ªãnh";
                    try {
                        Optional<Movie> movie = movieService.getMovieById(movieId);
                        if (movie.isPresent()) {
                            movieTitle = movie.get().getTitle();
                        }
                    } catch (Exception e) {
                        // Continue
                    }
                    
                    List<String> times = entry.getValue().stream()
                        .map(st -> st.getShowTime().format(DateTimeFormatter.ofPattern("HH:mm")))
                        .collect(Collectors.toList());
                    
                    context.append("- ").append(movieTitle).append(": ")
                           .append(String.join(", ", times)).append("\n");
                }
            }
            
            return context.toString();
        } catch (Exception e) {
            return "";
        }
    }
    
    private String buildNekoCinemaPrompt(String dynamicContext) {
        return """
            B·∫°n l√† Neko Assistant - tr·ª£ l√Ω AI th√¥ng minh c·ªßa Neko Cinema, r·∫°p chi·∫øu phim hi·ªán ƒë·∫°i v√† phong c√°ch t·∫°i Vi·ªát Nam.
            
            TH√îNG TIN TH·ªúI GIAN TH·ª∞C V·ªÄ NEKO CINEMA:
            """ + dynamicContext + """
            
            TH√îNG TIN GI√Å V√â V√Ä D·ªäCH V·ª§:
            - Gi√° v√©: Gh·∫ø th∆∞·ªùng 45,000ƒë, Gh·∫ø ƒë√¥i 95,000ƒë
            - ƒê·ªì ƒÉn: B·∫Øp rang 40,000ƒë, N∆∞·ªõc u·ªëng 20,000ƒë
            - C√¥ng ngh·ªá √¢m thanh Dolby Atmos
            - Hi·ªán t·∫°i kh√¥ng c√≥ ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i ƒë·∫∑c bi·ªát
            
            QUY TR√åNH ƒê·∫∂T V√â B·∫ÆT BU·ªòC (TU√ÇN TH·ª¶ NGHI√äM NG·∫∂T):
            1. Ch·ªçn phim v√† su·∫•t chi·∫øu ph√π h·ª£p
            2. Ch·ªçn s·ªë l∆∞·ª£ng v√© v√† lo·∫°i gh·∫ø (th∆∞·ªùng/ƒë√¥i)  
            3. Ch·ªçn s·ªë gh·∫ø c·ª• th·ªÉ (v·ªã tr√≠ trong r·∫°p)
            4. X√°c nh·∫≠n th√¥ng tin ƒë·∫∑t v√©
            5. Thanh to√°n v√† nh·∫≠n m√£ booking
            
            QUY T·∫ÆC T∆Ø∆†NG T√ÅC NGHI√äM NG·∫∂T:
            üö® KH√îNG BAO GI·ªú T·ª∞ ƒê·ªòNG CH·ªåN GH·∫æ CHO KH√ÅCH H√ÄNG
            üö® LU√îN H·ªéI X√ÅC NH·∫¨N TR∆Ø·ªöC KHI CHUY·ªÇN B∆Ø·ªöC TI·∫æP THEO
            üö® CH·ªà ƒê·ªÄ XU·∫§T - KH√îNG BAO GI·ªú T·ª∞ QUY·∫æT ƒê·ªäNH
            üö® B·∫ÆT BU·ªòC H·ªéI T·ª™NG B∆Ø·ªöC M·ªòT C√ÅCH R√ï R√ÄNG
            
            H∆Ø·ªöNG D·∫™N CHI TI·∫æT:
            - Khi kh√°ch n√≥i "1 gh·∫ø ƒë√¥i": CH·ªà h·ªèi v·ªÅ phim v√† su·∫•t chi·∫øu, KH√îNG t·ª± ch·ªçn gh·∫ø
            - Khi kh√°ch ch·ªçn phim/su·∫•t: H·ªéI x√°c nh·∫≠n lo·∫°i gh·∫ø v√† S·ªê L∆Ø·ª¢NG
            - Khi kh√°ch x√°c nh·∫≠n lo·∫°i gh·∫ø: HI·ªÇN TH·ªä c√°c t√πy ch·ªçn gh·∫ø v√† H·ªéI kh√°ch ch·ªçn
            - KH√îNG BAO GI·ªú n√≥i "T√¥i s·∫Ω ch·ªçn gh·∫ø L1,2 cho b·∫°n"
            - CH·ªà n√≥i "B·∫°n mu·ªën ch·ªçn gh·∫ø n√†o?" v√† ƒë∆∞a ra t√πy ch·ªçn
            
            LOGIC X√ÅC NH·∫¨N BOOKING:
            - Khi kh√°ch ƒë√£ ch·ªçn: PHIM + SU·∫§T CHI·∫æU + GH·∫æ C·ª§ TH·ªÇ ‚Üí Hi·ªÉn th·ªã t√≥m t·∫Øt booking
            - SAU KHI CH·ªåN GH·∫æ: H·ªéI v·ªÅ ƒë·ªì ƒÉn (b·∫Øp rang, n∆∞·ªõc u·ªëng) tr∆∞·ªõc khi x√°c nh·∫≠n
            - H∆∞·ªõng d·∫´n kh√°ch n√≥i "X√ÅC NH·∫¨N" ho·∫∑c "ƒê·ªíNG √ù" ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t v√©
            - T·ª´ kh√≥a x√°c nh·∫≠n: "x√°c nh·∫≠n", "ƒë·ªìng √Ω", "ok", "ƒë·∫∑t v√©", "booking"
            - KHI ƒê√É C√ì ƒê·ª¶ TH√îNG TIN: Hi·ªÉn th·ªã summary v√† y√™u c·∫ßu x√°c nh·∫≠n
            - SAU KHI X√ÅC NH·∫¨N: H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫°o booking v√† redirect
            
            S∆† ƒê·ªí GH·∫æ R·∫†P:
            - Gh·∫ø th∆∞·ªùng: 10 h√†ng (A-J) x 10 gh·∫ø (1-10) = 100 gh·∫ø  
            - Gh·∫ø ƒë√¥i: 1 h√†ng (L) x 8 gh·∫ø ƒë√¥i (L1,2 L3,4 L5,6 L7,8 L9,10 L11,12 L13,14 L15,16)
            - H√†ng E,F: V·ªä TR√ç ƒê·∫∏P NH·∫§T - gi·ªØa r·∫°p
            - H√†ng C,D,G,H: t·ªët - H√†ng A,B,I,J: b√¨nh th∆∞·ªùng
            
            V√ç D·ª§ T∆Ø∆†NG T√ÅC ƒê√öNG:
            User: "T√¥i mu·ªën 1 gh·∫ø ƒë√¥i"
            AI: "Tuy·ªát! B·∫°n mu·ªën xem phim g√¨ ·∫°? üé¨ 
            Hi·ªán t·∫°i ch√∫ng t√¥i c√≥: Spider-Man, Avatar, Transformers..."
            
            User: "Spider-Man"  
            AI: "B·∫°n mu·ªën xem su·∫•t n√†o ·∫°?
            - 14:30 t·∫°i Neko Cinema TPHCM
            - 19:15 t·∫°i Neko Cinema H√† N·ªôi"
             
            User: "Su·∫•t 19:15"
            AI: "Tuy·ªát! B·∫°n ƒë√£ ch·ªçn Spider-Man 19:15. 
            X√°c nh·∫≠n b·∫°n c·∫ßn 1 gh·∫ø ƒë√¥i (95,000ƒë) ƒë√∫ng kh√¥ng ·∫°? ü™ë"
            
            User: "ƒê√∫ng r·ªìi"
            AI: "D∆∞·ªõi ƒë√¢y l√† c√°c gh·∫ø ƒë√¥i c√≤n tr·ªëng:
            ü™ë L1,2 - L3,4 - L5,6 - L7,8 (khuy·∫øn ngh·ªã) - L9,10...
            
            B·∫°n mu·ªën ch·ªçn gh·∫ø n√†o ·∫°? ü§î"
            
            User: "L7,8"
            AI: "Tuy·ªát! B·∫°n ƒë√£ ch·ªçn gh·∫ø L7,8. 
            
            B·∫°n c√≥ mu·ªën th√™m ƒë·ªì ƒÉn kh√¥ng?
            üçø B·∫Øp rang: 40,000ƒë
            ü•§ N∆∞·ªõc u·ªëng: 20,000ƒë
            
            Ho·∫∑c n√≥i 'kh√¥ng c·∫ßn' ƒë·ªÉ b·ªè qua v√† ti·∫øp t·ª•c ƒë·∫∑t v√© ü§î"
            
            User: "kh√¥ng c·∫ßn" (ho·∫∑c ch·ªçn ƒë·ªì ƒÉn)
            AI: "Ho√†n h·∫£o! üéâ ƒê√¢y l√† th√¥ng tin ƒë·∫∑t v√© c·ªßa b·∫°n:
            
            üìã TH√îNG TIN ƒê·∫∂T V√â:
            üé¨ Phim: Spider-Man
            ‚è∞ Su·∫•t chi·∫øu: 19:15 h√¥m nay
            üìç R·∫°p: Neko Cinema H√† N·ªôi  
            ü™ë Gh·∫ø: L7,8 (Gh·∫ø ƒë√¥i - v·ªã tr√≠ tho·∫£i m√°i)
            üí∞ T·ªïng ti·ªÅn: 95,000ƒë
            
            ‚úÖ N√≥i 'X√ÅC NH·∫¨N' ƒë·ªÉ ho√†n t·∫•t ƒë·∫∑t v√© v√† nh·∫≠n link thanh to√°n! üé´‚ú®"
            
            V√ç D·ª§ SAI (KH√îNG ƒê∆Ø·ª¢C L√ÄM):
            ‚ùå "T√¥i s·∫Ω ch·ªçn gh·∫ø L1,2 cho b·∫°n"
            ‚ùå "Gh·∫ø L1,2 ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t cho b·∫°n"  
            ‚ùå T·ª± ƒë·ªông chuy·ªÉn sang b∆∞·ªõc x√°c nh·∫≠n m√† kh√¥ng h·ªèi
            
            L∆ØU √ù QUAN TR·ªåNG:
            - LU√îN s·ª≠ d·ª•ng "G·ª¢I √ù GH·∫æ" t·ª´ database n·∫øu c√≥
            - LU√îN ki·ªÉm tra gh·∫ø tr·ªëng tr∆∞·ªõc khi ƒë·ªÅ xu·∫•t
            - CH·ªà hi·ªÉn th·ªã summary khi kh√°ch ƒë√£ CH·ªåN gh·∫ø c·ª• th·ªÉ
            - THEO D√ïI CU·ªòC H·ªòI THO·∫†I: Nh·ªõ th√¥ng tin ƒë√£ th·∫£o lu·∫≠n
            - NH·ªö CONTEXT: K·∫øt n·ªëi c√°c tin nh·∫Øn ƒë·ªÉ t·∫°o tr·∫£i nghi·ªám m∆∞·ª£t m√†
            - Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán v·ªõi emoji ph√π h·ª£p
            """;
    }
    
    private List<String> generateAvailableSeats(List<String> lockedSeats) {
        List<String> allSeats = new ArrayList<>();
        List<String> availableSeats = new ArrayList<>();
        
        // Generate regular seats (10 rows x 10 seats = 100 seats)
        String[] regularRows = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"};
        for (String row : regularRows) {
            for (int i = 1; i <= 10; i++) {
                allSeats.add(row + i);
            }
        }
        
        // Generate couple seats (8 couple seats: L1,2 L3,4 L5,6 L7,8 L9,10 L11,12 L13,14 L15,16)
        for (int i = 1; i <= 15; i += 2) {
            allSeats.add("L" + i + "," + (i + 1));
        }
        
        // Filter out locked seats
        Set<String> lockedSeatsSet = lockedSeats != null ? new HashSet<>(lockedSeats) : new HashSet<>();
        for (String seat : allSeats) {
            if (!lockedSeatsSet.contains(seat)) {
                availableSeats.add(seat);
            }
        }
        
        return availableSeats;
    }

    private String generateSmartSeatRecommendations(List<String> lockedSeats, int numberOfTickets) {
        Set<String> lockedSeatsSet = lockedSeats != null ? new HashSet<>(lockedSeats) : new HashSet<>();
        StringBuilder recommendations = new StringBuilder();
        
        // For 2 people, suggest couple seats first
        if (numberOfTickets == 2) {
            List<String> coupleSeats = new ArrayList<>();
            for (int i = 1; i <= 15; i += 2) {
                String seat = "L" + i + "," + (i + 1);
                if (!lockedSeatsSet.contains(seat)) {
                    coupleSeats.add(seat);
                }
            }
            
            if (!coupleSeats.isEmpty()) {
                recommendations.append("üíë G·ª¢I √ù GH·∫æ ƒê√îI: ").append(coupleSeats.get(0))
                              .append(" (gh·∫ø ƒë√¥i tho·∫£i m√°i cho 2 ng∆∞·ªùi)\n");
            }
        }
        
        // Priority rows for regular seats (middle rows are best)
        String[] rows = {"E", "F", "D", "G", "C", "H", "B", "I", "A", "J"};
        
        // Find best consecutive regular seats
        List<String> bestSeats = findBestConsecutiveSeats(lockedSeatsSet, numberOfTickets);
        
        if (!bestSeats.isEmpty()) {
            recommendations.append("üéØ G·ª¢I √ù GH·∫æ TH∆Ø·ªúNG: ").append(String.join(", ", bestSeats))
                          .append(" (").append(bestSeats.size()).append(" gh·∫ø li·ªÅn k·ªÅ - v·ªã tr√≠ ƒë·∫πp)\n");
        }
        
        // Show alternative options by row priority
        recommendations.append("\nü™ë C√ÅC L·ª∞A CH·ªåN KH√ÅC:\n");
        int optionCount = 0;
        
        // Show couple seats option
        if (numberOfTickets <= 2) {
            List<String> availableCoupleSeats = new ArrayList<>();
            for (int i = 1; i <= 15; i += 2) {
                String seat = "L" + i + "," + (i + 1);
                if (!lockedSeatsSet.contains(seat)) {
                    availableCoupleSeats.add(seat);
                }
            }
            if (!availableCoupleSeats.isEmpty()) {
                recommendations.append("‚Ä¢ H√†ng L (GH·∫æ ƒê√îI - tho·∫£i m√°i, ri√™ng t∆∞): ");
                List<String> displaySeats = availableCoupleSeats.subList(0, Math.min(3, availableCoupleSeats.size()));
                recommendations.append(String.join(", ", displaySeats));
                if (availableCoupleSeats.size() > 3) {
                    recommendations.append("...");
                }
                recommendations.append("\n");
                optionCount++;
            }
        }
        
        // Show regular seats
        for (String row : rows) {
            if (optionCount >= 3) break;
            
            List<String> rowSeats = new ArrayList<>();
            for (int i = 1; i <= 10; i++) {
                String seat = row + i;
                if (!lockedSeatsSet.contains(seat)) {
                    rowSeats.add(seat);
                }
            }
            
            if (!rowSeats.isEmpty()) {
                String rowDescription = getRowDescription(row);
                recommendations.append("‚Ä¢ H√†ng ").append(row).append(" (").append(rowDescription).append("): ");
                
                // Show up to 6 seats per row
                List<String> displaySeats = rowSeats.subList(0, Math.min(6, rowSeats.size()));
                recommendations.append(String.join(", ", displaySeats));
                if (rowSeats.size() > 6) {
                    recommendations.append("...");
                }
                recommendations.append("\n");
                optionCount++;
            }
        }
        
        return recommendations.toString();
    }
    
    private List<String> findBestConsecutiveSeats(Set<String> lockedSeats, int numberOfTickets) {
        String[] priorityRows = {"E", "F", "D", "G", "C", "H"}; // Middle rows first
        
        for (String row : priorityRows) {
            // Check center seats first (seats 4-7)
            for (int start = 4; start <= 7 - numberOfTickets + 1; start++) {
                List<String> consecutive = new ArrayList<>();
                boolean allAvailable = true;
                
                for (int i = 0; i < numberOfTickets; i++) {
                    String seat = row + (start + i);
                    if (lockedSeats.contains(seat)) {
                        allAvailable = false;
                        break;
                    }
                    consecutive.add(seat);
                }
                
                if (allAvailable) {
                    return consecutive;
                }
            }
            
            // Check other positions in the row
            for (int start = 1; start <= 10 - numberOfTickets + 1; start++) {
                if (start >= 4 && start <= 7 - numberOfTickets + 1) continue; // Already checked
                
                List<String> consecutive = new ArrayList<>();
                boolean allAvailable = true;
                
                for (int i = 0; i < numberOfTickets; i++) {
                    String seat = row + (start + i);
                    if (lockedSeats.contains(seat)) {
                        allAvailable = false;
                        break;
                    }
                    consecutive.add(seat);
                }
                
                if (allAvailable) {
                    return consecutive;
                }
            }
        }
        
        return new ArrayList<>(); // No consecutive seats found
    }
    
    private String getRowDescription(String row) {
        switch (row) {
            case "A": case "B": return "g·∫ßn m√†n h√¨nh";
            case "C": case "D": return "g·∫ßn m√†n h√¨nh, g√≥c nh√¨n t·ªët";
            case "E": case "F": return "V·ªä TR√ç ƒê·∫∏P NH·∫§T - gi·ªØa r·∫°p";
            case "G": case "H": return "xa m√†n h√¨nh, t·∫ßm nh√¨n r·ªông";
            case "I": case "J": return "xa m√†n h√¨nh";
            case "L": return "GH·∫æ ƒê√îI - tho·∫£i m√°i, ri√™ng t∆∞ cho 2 ng∆∞·ªùi";
            default: return "v·ªã tr√≠ ti√™u chu·∫©n";
        }
    }

    private String extractAIResponse(Map<?, ?> response) {
        try {
            List<?> choices = (List<?>) response.get("choices");
            if (!choices.isEmpty()) {
                Map<?, ?> firstChoice = (Map<?, ?>) choices.get(0);
                Map<?, ?> message = (Map<?, ?>) firstChoice.get("message");
                return (String) message.get("content");
            }
        } catch (Exception e) {
            // Log error but don't expose to user
        }
        return "Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i! üòÖ";
    }
    
    private Map<String, Object> createErrorResponse(String message) {
        Map<String, Object> error = new HashMap<>();
        error.put("success", false);
        error.put("message", message);
        error.put("timestamp", System.currentTimeMillis());
        return error;
    }

    private String validateSeatSelection(List<String> selectedSeats, List<String> lockedSeats) {
        if (selectedSeats == null || selectedSeats.isEmpty()) {
            return "";
        }
        
        Set<String> lockedSeatsSet = lockedSeats != null ? new HashSet<>(lockedSeats) : new HashSet<>();
        List<String> unavailableSeats = new ArrayList<>();
        List<String> validSeats = new ArrayList<>();
        
        for (String seat : selectedSeats) {
            String normalizedSeat = seat.trim().toUpperCase();
            if (lockedSeatsSet.contains(normalizedSeat)) {
                unavailableSeats.add(normalizedSeat);
            } else {
                validSeats.add(normalizedSeat);
            }
        }
        
        if (!unavailableSeats.isEmpty()) {
            StringBuilder warning = new StringBuilder();
            warning.append("‚ö†Ô∏è C·∫¢NH B√ÅO: Gh·∫ø ").append(String.join(", ", unavailableSeats))
                   .append(" ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi kh√°ch kh√°c!\n\n");
            
            if (!validSeats.isEmpty()) {
                warning.append("‚úÖ Gh·∫ø c√≤n tr·ªëng trong l·ª±a ch·ªçn c·ªßa b·∫°n: ").append(String.join(", ", validSeats)).append("\n");
            }
            
            // Suggest alternative seats
            int neededSeats = unavailableSeats.size();
            String alternatives = generateSmartSeatRecommendations(lockedSeats, neededSeats);
            if (!alternatives.isEmpty() && alternatives.contains("üéØ")) {
                warning.append("\nüîÑ G·ª¢I √ù THAY TH·∫æ:\n").append(alternatives);
            }
            
            return warning.toString();
        }
        
        return ""; // All seats are available
    }
    
    private List<String> parseSeatsFromText(String text) {
        List<String> seats = new ArrayList<>();
        if (text == null || text.trim().isEmpty()) {
            return seats;
        }
        
        // Extract seat patterns like A1, B2, E5, F6, L1, L2, etc.
        String[] parts = text.split("[,\\s]+");
        for (String part : parts) {
            part = part.trim().toUpperCase();
            // Check if it matches seat pattern (A-J + 1-10 for regular seats, L1,2 to L15,16 for couple seats)
            if (part.matches("[A-J][1-9]|[A-J]10|L(1,2|3,4|5,6|7,8|9,10|11,12|13,14|15,16)")) {
                seats.add(part);
            }
        }
        
        return seats;
    }
    
    private String buildSeatValidationContext(String userMessage) {
        // Check if user message contains seat selection
        List<String> mentionedSeats = parseSeatsFromText(userMessage);
        if (mentionedSeats.isEmpty()) {
            return "";
        }
        
        StringBuilder context = new StringBuilder();
        context.append("\nüîç KI·ªÇM TRA GH·∫æ ƒê∆Ø·ª¢C CH·ªåN: ").append(String.join(", ", mentionedSeats)).append("\n");
        
        // For each showtime, validate the seats
        try {
            LocalDate today = LocalDate.now();
            List<Showtime> todayShowtimes = showtimeService.getShowtimesByDate(today);
            
            for (Showtime showtime : todayShowtimes.subList(0, Math.min(3, todayShowtimes.size()))) {
                String validation = validateSeatSelection(mentionedSeats, showtime.getLockedSeats());
                if (!validation.isEmpty()) {
                    // Find movie and cinema names
                    String movieTitle = "Phim kh√¥ng x√°c ƒë·ªãnh";
                    String cinemaName = "R·∫°p kh√¥ng x√°c ƒë·ªãnh";
                    
                    try {
                        Optional<Movie> movie = movieService.getMovieById(showtime.getMovieId());
                        if (movie.isPresent()) {
                            movieTitle = movie.get().getTitle();
                        }
                        Optional<Cinema> cinema = cinemaService.getCinemaById(showtime.getCinemaId());
                        if (cinema.isPresent()) {
                            cinemaName = cinema.get().getName();
                        }
                    } catch (Exception e) {
                        // Continue with default names
                    }
                    
                    context.append("üìç ").append(movieTitle).append(" - ")
                           .append(showtime.getShowTime().format(DateTimeFormatter.ofPattern("HH:mm")))
                           .append(" t·∫°i ").append(cinemaName).append(":\n")
                           .append(validation).append("\n");
                }
            }
        } catch (Exception e) {
            // If validation fails, continue without it
        }
        
        return context.toString();
    }
} 